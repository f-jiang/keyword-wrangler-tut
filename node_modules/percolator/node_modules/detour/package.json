{
  "name": "detour",
  "description": "detour is a reimagining of routing in node.js",
  "keywords": [
    "api",
    "rest",
    "http",
    "resource",
    "routing",
    "router",
    "route"
  ],
  "version": "0.16.9",
  "bugs": {
    "url": "https://github.com/cainus/detour/issues"
  },
  "scripts": {
    "test": "make test"
  },
  "maintainers": [
    {
      "name": "Gregg Caines",
      "email": "gregg@caines.ca",
      "url": "http://caines.ca"
    }
  ],
  "dependencies": {
    "underscore": "",
    "walk": "git://github.com/cainus/node-walk.git#9e461cd9a52daa54b86cda2f2e17e55b6750553f",
    "send": "0.1.4"
  },
  "devDependencies": {
    "watch": "0.5.1",
    "hottap": "1.0.0",
    "mocha": "1.3.2",
    "should": "1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:cainus/detour.git"
  },
  "main": "./detour",
  "license": "MIT",
  "readme": "# detour\n[![Build Status](https://secure.travis-ci.org/cainus/detour.png?branch=master)](http://travis-ci.org/cainus/detour)\n\nDetour is a router for node.js applications.  It should be useful for any sort of web application, \nbut it's got additional features to make great HTTP APIs easy.\n\nThis project is entirely experimental, and I'm still working out whether the experiment has \nbeen a success.\n\n## Features:\n* Named routes, easy URL generation.\n* Correctly handles 500, 501, 415, 404, 405 responses for you (if you want).\n* Correctly handles OPTIONS, HEAD for you (if you want).\n* Easy look-up of parent and child URLs (in case you want to put links to related resources).\n* Allows route-by-route assignment of Connect-compatible middleware\n* Helper function to get variables from the URL of a dynamic route.\n* Can be used with a plain node.js http server, or as an express middleware (or in your own project)\n\n## Some unusual parts:\nThese constraints are by-design for simpler routes, nicer url hierarchy, and better error-handling.\n* No regex in route definition.  Dynamic URLs can still be defined though eg:  /user/*userid\n* No orphan routes.  You can't route /this/long/path if /this/long hasn't already been routed.\n* Routes go to an object (that should have GET,POST,etc methods on it), not to a function.  We'll \ncall that object a 'resource'.\n* All media-type (json? xml?) stuff is left up to the 'resource'.\n* Server-side only.  This router is specifically designed for server use, and there's very little that\nwould apply on the client-side.\n\n## Simple Example:\n```javascript\nvar http = require('http')\nvar detour = require('./detour').detour;\nvar d = new detour();\nvar exampleResource = {GET : function(req, res){res.end(\"test\");}}\nd.route('', exampleResource)\nvar server = http.createServer(function(req, res){\n                                 d.dispatch(req, res)\n                               });\nserver.listen(9999, function(){\n                       console.log(\"listening on 9999\");\n                    });\n```\n\n\nThe tests are currently the best set of more advanced examples that I have time to document at the moment.\n\n## Automated Tests:\nnpm test\n",
  "readmeFilename": "README.md",
  "_id": "detour@0.16.9",
  "dist": {
    "shasum": "f9783c214f720c0b6cd5bdfcb51941ead66612c0"
  },
  "_from": "detour@0.16.9",
  "_resolved": "https://registry.npmjs.org/detour/-/detour-0.16.9.tgz"
}
