{
  "name": "reaper",
  "description": "manages serializers/deserializers for API content-types/media-types",
  "keywords": [
    "api",
    "rest",
    "http",
    "representation",
    "media-type",
    "media",
    "content",
    "content-type",
    "negotiation",
    "conneg"
  ],
  "version": "0.3.1",
  "bugs": {
    "url": "https://github.com/cainus/reaper/issues"
  },
  "scripts": {
    "test": "make test"
  },
  "maintainers": [
    {
      "name": "Gregg Caines",
      "email": "gregg@caines.ca",
      "url": "http://caines.ca"
    }
  ],
  "dependencies": {
    "underscore": "",
    "negotiator": "0.2.5"
  },
  "devDependencies": {
    "jscoverage": "0.3.7",
    "watch": "0.5.1",
    "hottap": "1.0.0",
    "mocha": "1.3.2",
    "should": "1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:cainus/reaper.git"
  },
  "main": "./reaper",
  "license": "MIT",
  "readme": "# Reaper\n\n[![Build\nStatus](https://secure.travis-ci.org/cainus/reaper.png?branch=master)](http://travis-ci.org/cainus/reaper)\n[![Coverage\nStatus](https://coveralls.io/repos/cainus/reaper/badge.png?branch=master)](https://coveralls.io/r/cainus/reaper)\n[![NPM\nversion](https://badge.fury.io/js/reaper.png)](http://badge.fury.io/js/reaper)\n\n\nReaper picks the correct media-type for a resource based on a\nrequest's Accept header and what the resource or server supports.\n\nIt also allows the registration of serializers / deserializers for\nautomatic serialization and deserialization of any formats that might \nbe automatically serializable/deserializable.\n\n\n```javascript\n\nvar reaper = new Reaper();\nreaper.register('application/json', \n                function(str){ return JSON.parse(str); },\n                function(obj){ return JSON.stringify(obj); });\n\nreaper.isAcceptable('application/json');   // returns true\nreaper.isAcceptable('*/*');   // returns true\nreaper.isAcceptable('application/xml');   // returns false\n\nreaper.isRegistered('application/json');  // returns true\nreaper.isRegistered('application/xml');  // returns false\n\nreaper.input(\"application/json\", '{\"hello\" : \"world\"}');  // returns {hello : \"world\"}\nreaper.output(\"application/json\", {hello : \"world\"});   // returns '{\"hello\" : \"world\"}'\n\n\n```\n\nAdditionally Reaper comes with a connect-compatible middleware that attaches a `body` and `rawBody` object to your request object that automatically uses any deserializer you may have configured for the content-type to populate the `body` property.  The middleware will return errors in the case of bad deserialization, or unacceptable Accept / Content-Type headers.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "reaper@0.3.1",
  "dist": {
    "shasum": "30c2e8d27a8cc7dd78c5335ec30f664f9b048f5f"
  },
  "_from": "reaper@0.3.1",
  "_resolved": "https://registry.npmjs.org/reaper/-/reaper-0.3.1.tgz"
}
