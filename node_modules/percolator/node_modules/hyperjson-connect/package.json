{
  "name": "hyperjson-connect",
  "version": "0.0.7",
  "description": "connect middleware for hyperjson support",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cainus/hyperjson-connect.git"
  },
  "keywords": [
    "json",
    "hyperjson",
    "hyper-json",
    "hyper+json",
    "hypermedia",
    "api",
    "connect",
    "middleware",
    "rest"
  ],
  "author": {
    "name": "Gregg Caines"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/cainus/hyperjson-connect/issues"
  },
  "devDependencies": {
    "mocha": "1.15.1",
    "connect": "2.11.2",
    "express": "3.4.6",
    "should": "2.1.1",
    "request": "2.28.0",
    "istanbul": "0.1.46",
    "coveralls": "2.6.0",
    "mocha-lcov-reporter": "0.0.1",
    "jshint": "2.3.0"
  },
  "dependencies": {
    "underscore": "1.5.2",
    "hyperjson": "0.0.1",
    "urlgrey": "0.3.2"
  },
  "homepage": "https://github.com/cainus/hyperjson-connect",
  "directories": {
    "test": "test"
  },
  "readme": "hyperjson-connect\n=================\n\nThis is a connect-compatible middleware for adding support for easily creating json api responses based on the [hyper+json spec](https://github.com/cainus/hyper-json-spec) (using the [hyperjson library](https://github.com/cainus/hyper-json/)).\n\n\n\n[![Build Status](https://travis-ci.org/cainus/hyperjson-connect.png?branch=master)](https://travis-ci.org/cainus/hyperjson-connect)\n[![Coverage Status](https://coveralls.io/repos/cainus/hyperjson-connect/badge.png?branch=master)](https://coveralls.io/r/cainus/hyperjson-connect?branch=master)\n\n[![NPM](https://nodei.co/npm/hyperjson-connect.png)](https://nodei.co/npm/hyperjson-connect/)\n\n\nThis middleware provides a fluent interface for adding links to json api responses.  Links are added in the Hyper+json style (documented \n[here](https://github.com/cainus/hyper-json-spec) ).\n\nThis sort of library is useful if you want to create hypermedia apis using json.\n\n## A few examples:\n\n### res.object()\n\n##### Basic Usage  \nCreate a json representation of an object and send it in the http response:\n```javascript\nres.object({thisis : \"a test\"}).send();\n```\n\n#### .toString()\nCreates json strings from objects.\n```javascript\nres.object({thisis : \"a test\"}).toString();  // '{\"thisis\":\"a test\"}'\n```\n\n#### .send()\nActually send a response.\n```javascript\nres.object({thisis : \"a test\"}).send();\n                 /* { thisis : \"a test\", \n                      prop1 : {\n                        random : \"value\"}\n                      }\n                 */\n```\n\n#### .toObject()\nReturns the resulting deserialized \"json\" object.\n```javascript\nres.object({thisis : \"a test\"}).toObject();  // {\"thisis\":\"a test\"}\n```\n\n#### .property()\nAdds a property to the json output.\n```javascript\nres.object({thisis : \"a test\"})\n  .property(\"prop1\", {random : \"value\"})\n  .send();                 /* { thisis : \"a test\", \n                                    prop1 : {\n                                      random : \"value\"}\n                                  }\n                               */\n```\n\n\n\n\n#### .link()\nAdds a link to the json output.\n```javascript\nres.object({thisis : \"a test\"})\n  .link(\"self\", \"http://localhost:8080/api/test\")\n  .send();                 /* { thisis : \"a test\", \n                                    _links : {\n                                      self : {\n                                        href : \"http://localhost:8080/api/test\"\n                                      }\n                                  }\n                               */\n```\nThis can be called multiple times to add more links.\n```javascript\nres.object({thisis : \"a test\"})\n  .link(\"self\", \"http://localhost:8080/api/test\")\n  .link(\"parent\", \"http://localhost:8080/api/\")\n  .link(\"kid\", \"http://localhost:8080/api/kid1\")\n  .link(\"kid\", \"http://localhost:8080/api/kid2\")\n  .send();                 /* { thisis : \"a test\", \n                                    _links : {\n                                      self : {\n                                        href : \"http://localhost:8080/api/test\"\n                                      },\n                                      parent : {\n                                        href : \"http://localhost:8080/api/\"\n                                      },\n                                      kid : [{\n                                        href : \"http://localhost:8080/api/kid1\"\n                                      },{\n                                        href : \"http://localhost:8080/api/kid2\"\n                                      }]\n                                  }\n                               */\n```\n`link()` can also be used to add non-traditional links for HTTP methods other than GET.\n```javascript\nres.object({thisis : \"a test\"})\n  .link(\"self\", \"http://percolatorjs.com\", {type : 'application/json', schema : {}, method : 'POST'})\n  .send();                  /* {  thisis : \"a test\", \n                                      _links : {\n                                          self : { href : \"http://percolatorjs.com\",\n                                                   type : 'application/json',\n                                                   schema : {},\n                                                   method : 'POST' }\n                                      }\n                                    }\n                                */\n\n```\n\nCheck out the [hyper+json spec](https://github.com/cainus/hyper-json-spec) if you want to read more about these kinds of links.\n\n### res.collection()\n`res.collection()` has all the same features of res.object(), except it takes an array of objects instead of just one object, and returns them wrapped in a json object that is also linkable.  Here's some eaxmple output:\n\n```javascript\nres.collection([{test:1}, {test:2}]).send();\n    /*\n      {\n        \"_items\" : [\n          {\"test\" : 1}, {\"test\" : 2}\n        ]\n      }\n    */\n```\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "hyperjson-connect@0.0.7",
  "dist": {
    "shasum": "d6dd39487b857e041ccc5eeae1a78a7a30cbda00"
  },
  "_from": "hyperjson-connect@0.0.7",
  "_resolved": "https://registry.npmjs.org/hyperjson-connect/-/hyperjson-connect-0.0.7.tgz"
}
